import traceback

import allure
import pytest
from playwright.sync_api import expect
# from Rule_form_new import report_about, report_bug_and_stop
from conftest import page_open
from helper import debug
import re
from typing import Callable, Pattern, Union, Optional
from playwright.sync_api import Page, TimeoutError as PlaywrightTimeoutError
import invalid_datas as in_d
from datetime import datetime
from enter_to_homepage import enter_to_fieldspage
from utils import  checking_for_errors

# now = datetime.now()
fields = []
valid_values = []
invalid_values = {}

URLMatcher = Union[str, Pattern[str], Callable[[str], bool]]

def click_and_wait_url_change(
    page: Page,
    do_click: Callable[[], None],
    url: Optional[URLMatcher] = None,          # —à–∞–±–ª–æ–Ω/regex/–ø—Ä–µ–¥–∏–∫–∞—Ç –∏–ª–∏ None = "–ª—é–±–æ–π –Ω–æ–≤—ã–π URL"
    *,
    timeout: float = 5000,
    wait_until: str = "commit"                 # "commit" –Ω–∞–¥—ë–∂–Ω–æ –ª–æ–≤–∏—Ç —Å–º–µ–Ω—É URL –±–µ–∑ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
) -> tuple[bool, str]:
    old = page.url
    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∂–¥—ë–º –ª—é–±–æ–π URL, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
    matcher: URLMatcher = (lambda u: u != old) if url is None else url

    do_click()
    try:
        page.wait_for_url(matcher, timeout=timeout, wait_until=wait_until)
        return (page.url != old, page.url)
    except PlaywrightTimeoutError:
        return (False, page.url)


def fail_on_alert(
    page: Page,
    type_: str = "error",
    timeout: int = 2000
) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–ª–µ—Ä—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –ø–∞–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω.

    :param page: –æ–±—ä–µ–∫—Ç Playwright Page
    :param type_: —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (error, success, warning, info)
    :param timeout: —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è (–º—Å)
    """
    # –°–ª–æ–≤–∞—Ä—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω—è–π –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç)
    selectors = {
        "error": ".alert-danger, .notification.error, .toast-error",
        "success": ".alert-success, .notification.success, .toast-success",
        "warning": ".alert-warning, .notification.warning, .toast-warning",
        "info": ".alert-info, .notification.info, .toast-info",
    }

    selector = selectors.get(type_)
    if not selector:
        debug(f"{type_}", f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞")
        raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: {type_}")


    try:
        # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        el = page.wait_for_selector(selector, timeout=timeout)
        # pytest.fail(f"‚ùå –ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É '{type_}': {el.inner_text()}")
        debug(f"{el.inner_text()}", f"‚ùå –ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É '{type_}'")
        return type_, el.inner_text()
    except PlaywrightTimeoutError:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å ‚Äî –≤—Å—ë —Ö–æ—Ä–æ—à–æ
        # pass
        return None

# —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def valid_val(user_data):
    global fields
    fields = user_data[0].keys()
    val_el = []
    # –∑–±—ñ—Ä –∑–Ω–∞—á–µ–Ω—å –ø–æ–ª—ñ–≤ –ø–æ —ñ–º–µ–Ω–∞–º –ø–æ–ª—ñ–≤
    for val in user_data[0].values():
        val_el.append(val)
    return val_el
# —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—è–º
def invalid_val(user_data):
    global fields
    inval_el = {}
    # –ø–µ—Ä–µ–±—ñ—Ä –ø–æ –Ω–∞–∑–≤–∞–º –ø–æ–ª—ñ–≤
    for field in fields:
        if field != 'fix_enter' and field != "check_attr" and field != 'el_fix_after_fill' and field != 'txt_el_fix_after_fill':
            ar_inv = []
            # –ø–µ—Ä–µ–±—ñ—Ä –ø–æ –Ω–∞–∑–≤–∞–º –ø–æ–ª—ñ–≤ –¥–ª—è —Ä–æ–∑–±–æ—Ä—É —Ç–∏–ø—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑—ñ —Å–ø–∏—Å–∫—ñ–≤
            for el in user_data[1][field]:
            # if field != 'fix_enter' and field != "check_attr" and field != 'el_fix_after_fill' and field != 'txt_el_fix_after_fill':
                if el[:3] == 'len':
                    lminmax = el[4:]
                    lmin = int(lminmax.split(" ", 1)[0])
                    lmax = int(lminmax.split(" ", 1)[1])
                    first = ((user_data[0][field] * 6)[:(lmin - 1)], "lenmin")
                    second = ((user_data[0][field] * 6)[:(lmax + 2)], "lenmax")
                    ar_inv.append(first)
                    ar_inv.append(second)
                elif el == "absent":
                    ar_inv.append(("", "absent"))
                elif el == "no_url":
                    for el_no_url in in_d.invalid_urls:
                        ar_inv.append((el_no_url, "no_url"))
                elif el == "no_email":
                    for el_no_email in in_d.invalid_emails:
                        ar_inv.append((el_no_email, "no_email"))
                elif el == "no_lower":
                    ar_inv.append((user_data[0][field].upper(), "no_lower"))
                elif el == "no_upper":
                    ar_inv.append((user_data[0][field].lower(), "no_upper"))
                elif el == "no_digit":
                    res = re.sub(r"\d", "", user_data[0][field])
                    ar_inv.append((res + 'ab', "no_digit"))
                elif el == "no_spec":
                    res = "".join(ch for ch in user_data[0][field] if ch.isalnum() or ch.isspace())
                    ar_inv.append((res + '1f', "no_spec"))
                elif el == "probel":
                    ar_inv.append((user_data[0][field][:2] + ' ' + user_data[0][field][2:], "probel"))
                elif el == "no_probel":
                    ar_inv.append((user_data[0][field].replace(" ", ""), "no_probel"))
                elif el == "Cyrillic":
                    ar_inv.append(("–ê–Ø–∞—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë", "Cyrillic"))
                elif el == "latin":
                    ar_inv.append(("AaZzEeYyUuIiOoPpFfDdGgHhJjKkLlQqWwRrTtSsCcVvBbNnMmXx", "latin"))
                elif el == "lowreglat":
                    ar_inv.append(("qwertyuiop", "lowreglat"))
                elif el == "upreglat":
                    ar_inv.append(("QWERTYUIOP", "upreglat"))
                elif el == "lowregcyr":
                    ar_inv.append(("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—ó—ñ—î—ë“ë", "lowregcyr"))
                elif el == "upregcyr":
                    ar_inv.append(("–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–Å–á–Ü–Ñ“ê", "upregcyr"))
                elif el == "one_reg_log":
                    ar_inv.append((user_data[0][field].upper(), "one_reg_log_upper"))
                    ar_inv.append((user_data[0][field].lower(), "one_reg_log_lower"))
                else:
                    ar_inv.append(("no_absent", "no_absent"))
        inval_el[field] =ar_inv
    return inval_el

#
# @allure.title("–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏: –ø–æ–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è")
# @pytest.mark.parametrize("scenario, expected_result", [
#     ("valid", "PASS"),
#     ("no_valid", "FAIL"),
#     #("hidden", "FAIL"),
# ])
# —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ø–æ–ª–µ–π –∏ —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def generate_negative_cases():
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã: –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ"""
    test_cases = []
    for i, field in enumerate(fields):
        for inv in invalid_values[field]:
            case = valid_values.copy()
            case[i] = inv
            test_cases.append((field, dict(zip(fields, case))))
    return test_cases

def test_collection_interactive_elements(page_open):
    import json
    def get_dom_structure(page):
        # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        return page.evaluate("""
            () => {
                const selectors = [
                    'a[href]',
                    'button',
                    'input',
                    'select',
                    'textarea',
                    'option',
                    'label',
                    'summary',
                    'details',
                    '[tabindex]',
                    '[role="button"]',
                    '[role="link"]',
                    '[contenteditable]'
                ];

                const elements = Array.from(document.querySelectorAll(selectors.join(',')));

                return elements.map(el => ({
                    tag: el.tagName.toLowerCase(),
                    type: el.getAttribute('type'),
                    id: el.id,
                    name: el.getAttribute('name'),
                    classes: el.className,
                    role: el.getAttribute('role'),
                    text: el.innerText.trim(),
                    href: el.getAttribute('href'),
                    value: el.value,
                }));
            }
            """)
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM
    dom_tree = get_dom_structure(page_open)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON-—Ñ–∞–π–ª
    # with open("dom_structure.json", "w", encoding="utf-8") as f:
    #     json.dump(dom_tree, f, ensure_ascii=False, indent=2)
    # with open("dom_structure.json", "r", encoding="utf-8") as f:
    #     data = json.load(f)
    print(f"üîπ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(dom_tree)}")
    print(json.dumps(dom_tree, ensure_ascii=False, indent=2))
    # print(json.dumps(data, ensure_ascii=False, indent=2))
    page_open.close()


# üîπ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
@pytest.mark.dependency(name="positive")
def test_positive_form(page_open, user_data):
    global valid_values, invalid_values, fields
    fields = user_data[0].keys()
    valid_values = valid_val(user_data)
    invalid_values = invalid_val(user_data)
    allure.dynamic.title("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ")
    print('\n')
    debug("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ", "–ü–æ—á–∞—Ç–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É")
    ##########################################################################
    try:
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–∞–π—Ç—É'):
            ##########################################################################
            # —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–æ–ª—è–º–∏, —â–æ —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ (page_open)
            page_open = enter_to_fieldspage(page_open)
            #############################################################################
            with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"):
                for field, value in user_data[0].items():
                    safe_field = re.sub(r'[\\/*?:"<>| ]', '_', field)
                    now = datetime.now()
                    if field != "url" and field != 'fix_enter' and field != "check_attr" and field != 'el_fix_after_fill' and field != 'txt_el_fix_after_fill':
                        expect(page_open.get_by_role("textbox", name=field)).to_be_visible()
                        debug(f"–∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ {field}", f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è {field}")
                        tb = page_open.get_by_role("textbox", name=field, exact=True)
                        # value = "–ø—Ä —Å–∫–æ‚Ññ"
                        tb.fill(value)
                        debug(f"–ó–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º {value}", f"–ü–æ–ª–µ {field}")
                        allure.attach(f"–ó–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º {value}", name=f"–ü–æ–ª–µ {field}")
                        #####################################################################
                        # —É–º–æ–≤–∞, —â–æ –≤–∏–±–∏—Ä–∞—î —á–∏ —Ç—Ä–µ–±–∞ —è–∫–æ—Å—å —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, —á–∏ —Ü–µ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è –ø—Ä–∏ –ø–æ–¥—ñ—ó –≤–∏—Ö–æ–¥—É –∑ –ø–æ–ª—è
                        if user_data[0]["fix_enter"] == 1:
                            tb.press("Enter")
                            debug("–ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª–∞–≤—ñ—à–µ—é Enter", f"–ü–æ–ª–µ {field}")
                        ######################################################################
                        # —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—è–≤–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                        # checking_for_errors(page_open, tag: str)
                        check_m = fail_on_alert(page_open, "error", 2000)
                        if check_m is None:
                        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—è–≤—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –ø–æ–ª–µ
                        # locator = page_open.locator('//*[@id="error_1_id_text_string"]')
                            check_m = checking_for_errors(page_open, user_data[0]["check_attr"])
                        # else:
                        #     check_m = fail_on_alert(page_open, "error", 2000)
                        if check_m[0] is not None:
                            #########################################################################
                            # try:
                                # locator.wait_for(state="visible", timeout=2000)
                                # # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                                # if locator.count() > 0 and locator.is_visible():
                                # if locator.count() > 0 and locator.is_visible:
                            text_err = check_m[1]
                            now = datetime.now()
                            page_open.screenshot(type='jpeg',
                                                 path=f'screenshots/negativ_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg")
                            debug(
                                f'–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ negativ_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg",
                                "–°–∫—Ä—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
                            allure.attach(
                                page_open.screenshot(),
                                name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏",
                                attachment_type=allure.attachment_type.PNG)
                            raise AssertionError(
                                f"–ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {text_err} –ø—Ä–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—è '{field}' –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {value}")
                            # except PlaywrightTimeoutError:
                                # –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                ##################################################################
                                # —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–ª–∏–≤–∏—Ö –¥—ñ–π –ø—ñ—Å–ª—è –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω–Ω—è –ø–æ–ª—è
                                # confirmation(page_open, value, field)
                        expect(page_open.get_by_text(f"Your input was: {value}")).to_be_visible()
                        debug(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –≤–∞–ª—ñ–¥–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è {value}", f"{field}")
                                ######################################################################

                # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                screenshot = page_open.screenshot()
                page_open.screenshot(type='jpeg', path=f'screenshots/positiv_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg")
                debug(f'–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ positiv_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg", "–°–∫—Ä—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
                allure.attach(
                    screenshot,
                    name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤",
                    attachment_type=allure.attachment_type.PNG
                )
                ####################################################################################
                # —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—ó –¥—ñ—ó –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—Ö—ñ–¥ –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)
                # after_fill_fields(page_open)
                ##################################################################################
                debug(f"–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ", "PASSED")

    except AssertionError as e:
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ \n{e}", "ASSERTIONERROR")
        debug(f"Current URL: {page_open.url}", "INFO")
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errorsa = []
        if text_err is not None:
            errorsa.append(f"{field}': - '{text_err}")
        else:
            errorsa.append(f"{field}: {e}")
        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errorsa.append(f"{field}': - '{alert.inner_text()}")
        if len(errorsa) > 1:
            debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:\n{errorsa}", "AssertionErrors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏ —É –ø–æ–ª—ñ {field}",
            attachment_type=allure.attachment_type.PNG
        )
        text_err = ""
    except Exception as e:
        fail_on_alert(page_open, "error", 2000)
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é \"{e}\"", "ERROR")
        debug(f"Current URL: {page_open.url}", "INFO")
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errors = []
        errors.append(f"{field}': - '{e}")
        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errors.append(alert.inner_text())
            debug(alert.inner_text(), "ERROR")
        if len(errors) > 1:
            debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:\n{errors}", "Errors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏ —É –ø–æ–ª—ñ {field}",
            attachment_type=allure.attachment_type.PNG
        )

        # # debug —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # try:
        #     account_text = page_open.locator("#maincontent").inner_text(timeout=5000)
        #     debug(account_text, "–¢–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account (—è–∫—â–æ —î):")
        # except:
        #     debug("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account", "INFO")
        #
        # # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AssertionError, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —É–ø–∞–ª –∏ pytest –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
        # raise e

# üîπ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ
# @pytest.mark.parametrize("invalid_field, data", generate_negative_cases())
@pytest.mark.dependency(depends=["positive"])
# def test_negative_form(page_open, invalid_field, data):
def test_negative_form(page_open, user_data):
    global valid_values, invalid_values, fields
    fields = user_data[0].keys()
    valid_values = valid_val(user_data)
    invalid_values = invalid_val(user_data)
    # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ø–æ–ª–µ–π —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    list_tuppels_negative_tests = generate_negative_cases()
    # –∑–±—ñ—Ä —ñ–º–µ–Ω –ø–æ–ª—ñ–≤ –¥–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
    fields_for_negative_tests = [t[0] for t in list_tuppels_negative_tests if t[0] != "url"]
    dict_for_negative_tests = {}
    count_tests_for_field = {}
    for ff in fields_for_negative_tests:
        dict_for_negative_tests[ff] = []
    # –ø–µ—Ä–µ–±—ñ–≥ –ø–æ –∫–æ—Ä—Ç–µ–∂–∞–º –∑—ñ —Å–ø–∏—Å–∫–∞–º–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    for t in list_tuppels_negative_tests:
        if t[0] in dict_for_negative_tests.keys():
            dict_negative = {}
            for key, value in t[1].items():
                if key != "url":
                    dict_negative[key] = value
            # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –∑—ñ —Å–ø–∏—Å–∫–∞–º–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–æ –ø–æ–ª—è—Ö
            # –∫–ª—é—á —Ü–µ —ñ–º'—è –ø–æ–ª—è –∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –ø–æ–ª—è–º–∏ —ñ –¥–∞–Ω–∏–º–∏'
            dict_for_negative_tests[t[0]].append(dict_negative)
    failed_cases = []  # —Ç—É—Ç –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–≤–∞–ª–∏
    allure.dynamic.title("–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –æ–¥–Ω–µ –ø–æ–ª–µ –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ, —ñ–Ω—à—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ")
    print('\n')
    debug("–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –æ–¥–Ω–µ –ø–æ–ª–µ –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ, —ñ–Ω—à—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ", "–ü–æ—á–∞—Ç–æ–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É")
    print('\n')
    with (allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–∞–π—Ç—É')):
        expect(page_open.get_by_role("link", name="ÔÄâ Homepage")).to_be_visible()
        debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Homepage", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Homepage")
        expect(page_open.get_by_role("heading", name="Hello!")).to_be_visible()
        debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Hello!", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Hello!")
        expect(page_open.get_by_role("link", name="Text input")).to_be_visible()
        debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input")
        link_input = page_open.get_by_role("link", name="Text input")
        changed, new_url = click_and_wait_url_change(page_open, lambda: link_input.click())
        debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ Text input", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        assert changed, "–ù–µ –≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"
        debug("–≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        expect(page_open.get_by_role("heading", name="Input field")).to_be_visible()
        debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Input field", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Input field")
        ###################################################################################################################
        expect(page_open.get_by_role("link", name="Text input")).to_be_visible()
        debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input")
        page_open.get_by_role("link", name="Text input").click()
        # changed, new_url = click_and_wait_url_change(page_open, lambda: link_input.click())
        debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ Text input", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É")
        # assert changed, "–ù–µ –≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"
        # expect(page_open.get_by_role("textbox", name="Text string*")).to_be_visible()
        # debug("–∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ Text string*", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è Text string*")
        for field, list_dicts_inv_data in dict_for_negative_tests.items():
            # try:
            count_tests_for_field[field] = len(list_dicts_inv_data)
            allure.dynamic.title(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
            print('\n')
            debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏")
            print('\n')
            #     –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑ —á–µ—Ä–≥–æ–≤–∏–º –Ω–µ–≥–∞—Ç–∏–≤–æ–º –¥–ª—è –ø–æ–ª—è
            for dict_cur_data in list_dicts_inv_data:
                try:
                    for field_key, el_list in dict_cur_data.items():
                        neg = False
                        value = ""
                        if isinstance(el_list, tuple):
                            el_list_n = el_list[0]
                            el_list_d = el_list[1]
                            neg = True
                        else:
                            el_list_d = el_list
                        with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤"):
                            # debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏", "–§–æ—Ä–º–∞")
                            tb = page_open.get_by_role("textbox", name=field_key, exact=True)
                            if neg:
                                ##############################################################
                                # tb = page_open.get_by_role("textbox", name=field_key, exact=True)
                                debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—è {field_key} –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é {el_list_n} –ø–æ —Ç–∏–ø—É {el_list_d}",
                                      "–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏")
                                tb.fill(el_list_n)
                                value = el_list_n
                                ##############################################################
                                str_att = f"–≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ {el_list_n} —É –ø–æ–ª–µ {field_key}:"
                                debug(str_att, f"{field_key}")
                                allure.attach(str_att + " " + "\"" + str(el_list_n) + "\"", name=f"–ü–æ–ª–µ {field_key}")
                            else:
                                ##############################################################
                                # tb = page_open.get_by_role("textbox", name=field_key, exact=True)
                                debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—è {field_key} –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ {el_list_d}",
                                      "–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏")
                                tb.fill(el_list_d)
                                value = el_list_d
                                ##############################################################
                                str_att = f"–≤–≤–µ–¥–µ–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ {el_list_d} —É –ø–æ–ª–µ {field_key}:"
                                debug(str_att, f"{field_key}")
                                allure.attach(str_att + " " + "\"" + str(el_list_d) + "\"", name=f"–ü–æ–ª–µ {field_key}")
                            tb.press("Enter")
                            debug("–∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª–∞–≤—ñ—à–µ—é Enter", f"{field_key}")

                            # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—è–≤—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
                            locator = page_open.locator('//*[@id="error_1_id_text_string"]')
                            text_err = locator.inner_text()
                            page_open.wait_for_selector('//*[@id="error_1_id_text_string"]', timeout=1000)
                            if locator.is_visible():
                                safe_field = re.sub(r'[\\/*?:"<>| ]', '_', field_key)
                                now = datetime.now()
                                page_open.screenshot(type='jpeg',
                                                     path=f'screenshots/negativ_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg")
                                debug(f'–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ negativ_{safe_field}_{now.strftime("%d-%m-%Y %H-%M-%S")}' + f"-{now.microsecond}.jpeg", "–°–∫—Ä—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
                                allure.attach(
                                    page_open.screenshot(),
                                    name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏",
                                    attachment_type=allure.attachment_type.PNG)
                                print('\n')
                                raise AssertionError(f"–ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {text_err} –ø—Ä–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—è '{field_key}' –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {el_list_n}")
                            expect(page_open.get_by_text(f"Your input was: {value}")).to_be_visible()
                            debug(f"–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è {value}", f"{field}")
                except AssertionError as e:
                    # debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—è {field} –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º \"{el_list_n}\"", "TEST FAIL")
                    fail_on_alert(page_open, "error", 2000)
                    failed_cases.append((field, el_list_n, str(e)))
                    continue

                    # alert = page_open.get_by_role("alert").locator("div").first
                    # if alert.is_visible():
                    #     errors.append(alert.inner_text())
                    #     debug(alert.inner_text(), "ERROR")


                except Exception as e:
                    # –ª–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–ø–æ–ª—è, –∞–ª–µ—Ä—Ç–∏ —Ç–æ—â–æ)
                    fail_on_alert(page_open, "error", 2000)
                    errors = []
                    for selector in [
                        "#firstname-error",
                        "#lastname-error",
                        "#email_address-error",
                        "#password-error",
                        "#password-confirmation-error",
                    ]:
                        if page_open.locator(selector).is_visible():
                            errors.append(page_open.locator(selector).inner_text())
                            debug(page_open.locator(selector).inner_text(), "ERROR")

                    alert = page_open.get_by_role("alert").locator("div").first
                    if alert.is_visible():
                        errors.append(alert.inner_text())
                        debug(alert.inner_text(), "ERROR")

                    if errors:
                        failed_cases.append((field, el_list_n, "; ".join(errors)))
                        debug(errors, "ERROR")

                    screenshot = page_open.screenshot()
                    allure.attach(screenshot, name="–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
                                  attachment_type=allure.attachment_type.PNG)
                    # page_open.screenshot(type='jpeg',
                    #                      path=f'screenshots/negativ{now.strftime("%d-%m-%Y %H-%M-%S")}.jpg')
                    # debug("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ negativerror.jpg", "–°–∫—Ä—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏")

                # finally:
                    # # –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π: —è–∫—â–æ –±—É–ª–∏ —Ñ–µ–π–ª–∏ ‚Äî –∑–∞–≤–∞–ª—é—î–º–æ —Ç–µ—Å—Ç 1 —Ä–∞–∑
                    # if failed_cases:
                    #     msg = "\n".join([f"{fld}='{val}' ‚Üí {err}" for fld, val, err in failed_cases])
                    #     debug(f"–ü–æ–º–∏–ª–∫–∏, –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º —Ç–µ—Å—Ç–æ–º:\n{msg}", "ERROR")
                    #     # raise AssertionError(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –∑–Ω–∞–π—à–æ–≤ –ø–æ–º–∏–ª–∫–∏:\n{msg}")
        # –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π: —è–∫—â–æ –±—É–ª–∏ —Ñ–µ–π–ª–∏ ‚Äî –∑–∞–≤–∞–ª—é—î–º–æ —Ç–µ—Å—Ç 1 —Ä–∞–∑
        if failed_cases:
            msg = "\n".join([f"{fld}='{val}' ‚Üí {err}" for fld, val, err in failed_cases])
            print('\n')
            txt_neg_tests = ""
            for key, neg_test in count_tests_for_field.items():
                txt_neg_tests = txt_neg_tests + f"\n{neg_test} —Ç–µ—Å—Ç–∞—Ö(—ñ) –¥–ª—è –ø–æ–ª—è '{key}'"
            # debug(f"{len(failed_cases)} –ü–æ–º–∏–ª–æ–∫, –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —É {count_tests_for_field} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º —Ç–µ—Å—Ç–æ–º:\n{msg}", "ERROR")
            debug(f"{len(failed_cases)} –ø–æ–º–∏–ª–æ–∫(–∫–∏), –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —É {txt_neg_tests}:\n{msg}",
                  "ERROR")
            # raise AssertionError(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –∑–Ω–∞–π—à–æ–≤ –ø–æ–º–∏–ª–∫–∏:\n{msg}")
