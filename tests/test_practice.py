import traceback

import allure
import pytest
from playwright.sync_api import expect, Page
from Rule_form_new import report_about, report_bug_and_stop
from helper import debug
import re
from typing import Callable, Pattern, Union, Optional
from playwright.sync_api import Page, TimeoutError as PlaywrightTimeoutError
import invalid_datas as in_d
from datetime import datetime

now = datetime.now()
fields = []
valid_values = []
invalid_values = {}

URLMatcher = Union[str, Pattern[str], Callable[[str], bool]]

def click_and_wait_url_change(
    page: Page,
    do_click: Callable[[], None],
    url: Optional[URLMatcher] = None,          # —à–∞–±–ª–æ–Ω/regex/–ø—Ä–µ–¥–∏–∫–∞—Ç –∏–ª–∏ None = "–ª—é–±–æ–π –Ω–æ–≤—ã–π URL"
    *,
    timeout: float = 5000,
    wait_until: str = "commit"                 # "commit" –Ω–∞–¥—ë–∂–Ω–æ –ª–æ–≤–∏—Ç —Å–º–µ–Ω—É URL –±–µ–∑ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
) -> tuple[bool, str]:
    old = page.url
    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∂–¥—ë–º –ª—é–±–æ–π URL, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
    matcher: URLMatcher = (lambda u: u != old) if url is None else url

    do_click()
    try:
        page.wait_for_url(matcher, timeout=timeout, wait_until=wait_until)
        return (page.url != old, page.url)
    except PlaywrightTimeoutError:
        return (False, page.url)


def fail_on_alert(
    page: Page,
    type_: str = "error",
    timeout: int = 2000
) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–ª–µ—Ä—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –ø–∞–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω.

    :param page: –æ–±—ä–µ–∫—Ç Playwright Page
    :param type_: —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (error, success, warning, info)
    :param timeout: —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è (–º—Å)
    """
    # –°–ª–æ–≤–∞—Ä—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω—è–π –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç)
    selectors = {
        "error": ".alert-danger, .notification.error, .toast-error",
        "success": ".alert-success, .notification.success, .toast-success",
        "warning": ".alert-warning, .notification.warning, .toast-warning",
        "info": ".alert-info, .notification.info, .toast-info",
    }

    selector = selectors.get(type_)
    if not selector:
        debug(f"{type_}", f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞")
        raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: {type_}")


    try:
        # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        el = page.wait_for_selector(selector, timeout=timeout)
        pytest.fail(f"‚ùå –ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É '{type_}': {el.inner_text()}")
        debug(f"{el.inner_text()}", f"‚ùå –ó'—è–≤–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É '{type_}'")
    except TimeoutError:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å ‚Äî –≤—Å—ë —Ö–æ—Ä–æ—à–æ
        pass

# —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def valid_val(user_data):
    global fields
    fields = user_data[0].keys()
    val_el = []
    # –∑–±—ñ—Ä –∑–Ω–∞—á–µ–Ω—å –ø–æ–ª—ñ–≤ –ø–æ —ñ–º–µ–Ω–∞–º –ø–æ–ª—ñ–≤
    for val in user_data[0].values():
        val_el.append(val)
    return val_el
# —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—è–º
def invalid_val(user_data):
    global fields
    inval_el = {}
    # –ø–µ—Ä–µ–±—ñ—Ä –ø–æ –Ω–∞–∑–≤–∞–º –ø–æ–ª—ñ–≤
    for field in fields:
        ar_inv = []
        # –ø–µ—Ä–µ–±—ñ—Ä –ø–æ –Ω–∞–∑–≤–∞–º –ø–æ–ª—ñ–≤ –¥–ª—è —Ä–æ–∑–±–æ—Ä—É —Ç–∏–ø—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑—ñ —Å–ø–∏—Å–∫—ñ–≤
        for el in user_data[1][field]:
            if el[:3] == 'len':
                lminmax = el[4:]
                lmin = int(lminmax.split(" ", 1)[0])
                lmax = int(lminmax.split(" ", 1)[1])
                first = ((user_data[0][field] * 6)[:(lmin - 2)], "lenmin")
                second = ((user_data[0][field] * 6)[:(lmax + 2)], "lenmax")
                ar_inv.append(first)
                ar_inv.append(second)
            elif el == "absent":
                ar_inv.append(("", "absent"))
            elif el == "no_url":
                for el_no_url in in_d.invalid_urls:
                    ar_inv.append((el_no_url, "no_url"))
            elif el == "no_email":
                for el_no_email in in_d.invalid_emails:
                    ar_inv.append((el_no_email, "no_email"))
            elif el == "no_lower":
                ar_inv.append((user_data[0][field].upper(), "no_lower"))
            elif el == "no_upper":
                ar_inv.append((user_data[0][field].lower(), "no_upper"))
            elif el == "no_digit":
                res = re.sub(r"\d", "", user_data[0][field])
                ar_inv.append((res + 'ab', "no_digit"))
            elif el == "no_spec":
                res = "".join(ch for ch in user_data[0][field] if ch.isalnum() or ch.isspace())
                ar_inv.append((res + '1f', "no_spec"))
            elif el == "probel":
                ar_inv.append((user_data[0][field][:2] + ' ' + user_data[0][field][2:], "probel"))
            elif el == "no_probel":
                ar_inv.append((user_data[0][field].replace(" ", ""), "no_probel"))
            elif el == "Cyrillic":
                ar_inv.append(("–ê–Ø–∞—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë", "Cyrillic"))
            elif el == "latin":
                ar_inv.append(("AaZzEeYyUuIiOoPpFfDdGgHhJjKkLlQqWwRrTtSsCcVvBbNnMmXx", "latin"))
            elif el == "lowreglat":
                ar_inv.append(("qwertyuiop", "lowreglat"))
            elif el == "upreglat":
                ar_inv.append(("QWERTYUIOP", "upreglat"))
            elif el == "lowregcyr":
                ar_inv.append(("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—ó—ñ—î—ë“ë", "lowregcyr"))
            elif el == "upregcyr":
                ar_inv.append(("–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–Å–á–Ü–Ñ“ê", "upregcyr"))
            elif el == "one_reg_log":
                ar_inv.append((user_data[0][field].upper(), "one_reg_log_upper"))
                ar_inv.append((user_data[0][field].lower(), "one_reg_log_lower"))
            else:
                ar_inv.append(("no_absent", "no_absent"))
        inval_el[field] =ar_inv
    return inval_el

#
# @allure.title("–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏: –ø–æ–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è")
# @pytest.mark.parametrize("scenario, expected_result", [
#     ("valid", "PASS"),
#     ("no_valid", "FAIL"),
#     #("hidden", "FAIL"),
# ])
# —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ø–æ–ª–µ–π –∏ —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def generate_negative_cases():
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã: –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ"""
    test_cases = []
    for i, field in enumerate(fields):
        for inv in invalid_values[field]:
            case = valid_values.copy()
            case[i] = inv
            test_cases.append((field, dict(zip(fields, case))))
    return test_cases

# üîπ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
# @pytest.mark.dependency(name="positive")
def test_positive_form(page_open, user_data):
    global valid_values, invalid_values, fields
    fields = user_data[0].keys()
    valid_values = valid_val(user_data)
    invalid_values = invalid_val(user_data)
    allure.dynamic.title("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ")
    print('\n')
    debug("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ", "–ü–æ—á–∞—Ç–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É")
    ##########################################################################
    try:
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–∞–π—Ç—É'):
            expect(page_open.get_by_role("link", name="ÔÄâ Homepage")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Homepage", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Homepage")
            expect(page_open.get_by_role("heading", name="Hello!")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Hello!", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Hello!")
            expect(page_open.get_by_role("link", name="Text input")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input")
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É Elements", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–¥–µ–º–µ–Ω—Ç—ñ–≤ HTML")
            link_input = page_open.get_by_role("link", name="Text input")
            changed, new_url = click_and_wait_url_change(page_open, lambda: link_input.click())
            # page.get_by_role("link", name="Text input").click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ Text input", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
            assert changed, "–ù–µ –≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"
            debug("–≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
            expect(page_open.get_by_role("heading", name="Input field")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Input field", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Input field")
            expect(page_open.get_by_role("link", name="Text input")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Text input")
            # expect(page_open.get_by_role("textbox", name="Text string*")).to_be_visible()
            # debug("–∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ text_string", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è text_string")
            with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"):
                for field, value in user_data[0].items():
                    if field != "url":
                        expect(page_open.get_by_role("textbox", name=field)).to_be_visible()
                        debug(f"–∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ {field}", f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è {field}")
                        tb = page_open.get_by_role("textbox", name=field, exact=True)
                        tb.fill(value)
                        debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª–µ", f"{field}")
                        allure.attach(str(value), name=f"–ü–æ–ª–µ {field}")
                        tb.press("Enter")
                        debug("–∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª–∞–≤—ñ—à–µ—é Enter", f"{field}")
                        expect(page_open.get_by_text(f"Your input was: {value}")).to_be_visible()
                        debug(f"–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è {value}", f"{field}")
            # page_open.get_by_role("textbox", name="Text string*").fill("Test QA")
            # debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ {field}", f"–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è {field}")


            # expect(page_open.get_by_role("heading", name="Elements")).to_be_visible()
            page_open.get_by_role("heading", name="Elements").click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É Elements", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–¥–µ–º–µ–Ω—Ç—ñ–≤ HTML")
            expect(page_open.get_by_text("Book Store Application")).to_be_visible()
            page_open.get_by_text("Book Store Application").click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ Book Store Application", "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            expect(page_open.get_by_text("Login")).to_be_visible()
            page_open.get_by_text("Login").click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ Login —Å–ø–∏—Å–∫—É Book Store Application",
                  "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            expect(page_open.get_by_role("heading", name="Login", exact=True)).to_be_visible()
            debug("–ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É —É –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ Book Store Application",
                  "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            expect(page_open.get_by_role("button", name="New User")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application",
                  "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            but_reestr = page_open.get_by_role("button", name="New User")

            changed, new_url = click_and_wait_url_change(page_open, lambda: but_reestr.click())
            debug("–∑—Ä–æ–±–ª–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application",
                  "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            assert changed, "–ù–µ –≤—ñ–¥–∫—Ä–∏–ª–∞—Å—å —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É"

            # --- –æ–±—Ö—ñ–¥ —Ä–µ–∫–ª–∞–º–∏ ---
            if "google_vignette" in page_open.url or "ad.doubleclick" in page_open.url:
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É google_vignette. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥...", "WARNING")
                page_open.go_back()
                expect(but_reestr).to_be_visible(timeout=10000)
                but_reestr.click()
                debug("–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∫–ª—ñ–∫ –ø—ñ—Å–ª—è —Ä–µ–∫–ª–∞–º–∏", "INFO")

            close_button = page_open.get_by_role("button", name="Close").first
            if close_button.is_visible():
                close_button.click()
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–æ—é Close. –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ Close", "WARNING")
        # with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application'):
        #     expect(page_open.get_by_role("heading", name="Register", exact=True)).to_be_visible()
        #     debug("–ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application",
        #           "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
        ##########################################################################
        with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"):
            for field, value in user_data[0].items():
                if field != "url":
                    tb = page_open.get_by_role("textbox", name=field, exact=True)
                    tb.fill(value)
                    debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª–µ", f"{field}")
                    allure.attach(str(value), name=f"–ü–æ–ª–µ {field}")
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É reCAPTCHA –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            page_open.route("https://www.google.com/recaptcha/api2/**", lambda route: route.fulfill(
                status=200,
                content_type="application/json",
                body='{"success": true}'
            ))
        print('\n')
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—ñ–π'):
            expect(page_open.get_by_role("button", name="Register")).to_be_visible()
            debug("–∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application",
                  "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")
            page_open.get_by_role("button", name="Register").click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Book Store Application", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É –ó–∞—Å—Ç–æ—Å—É–Ω–∫—É –∫–Ω–∏–∂–∫–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É")

            close_button = page_open.get_by_role("button", name="OK").first
            if close_button.is_visible():
                close_button.click()
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–æ—é OK. –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ OK", "WARNING")

        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        page_open.screenshot(type='jpeg', path='screenshots/positiv.jpg')
        debug("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ positiv.jpg", "–°–∫—Ä—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

    except AssertionError as e:
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", "ERROR")
        report_bug_and_stop(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", page_open)
        debug(f"Current URL: {page_open.url}", "INFO")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errors = []
        for selector in [
            "#firstname-error",
            "#lastname-error",
            "#email_address-error",
            "#password-error",
            "#password-confirmation-error",
        ]:
            if page_open.locator(selector).is_visible():
                errors.append(page_open.locator(selector).inner_text())

        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errors.append(alert.inner_text())
            debug(alert.inner_text(), "Errors list:")

        if errors:
            debug("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", "ERROR")
            debug(errors, "Errors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

    except Exception as e:
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é \"{e}\"", "ERROR")
        report_bug_and_stop(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é {e}", page_open)
        debug(f"Current URL: {page_open.url}", "INFO")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errors = []
        for selector in [
            "#firstname-error",
            "#lastname-error",
            "#email_address-error",
            "#password-error",
            "#password-confirmation-error",
        ]:
            if page_open.locator(selector).is_visible():
                errors.append(page_open.locator(selector).inner_text())
                debug(page_open.locator(selector).inner_text(), "ERROR")

        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errors.append(alert.inner_text())
            debug(alert.inner_text(), "ERROR")

        if errors:
            debug("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", "ERROR")
            debug(errors, "Errors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

        # debug —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            account_text = page_open.locator("#maincontent").inner_text(timeout=5000)
            debug(account_text, "–¢–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account (—è–∫—â–æ —î):")
        except:
            debug("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account", "INFO")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AssertionError, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —É–ø–∞–ª –∏ pytest –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
        raise e
