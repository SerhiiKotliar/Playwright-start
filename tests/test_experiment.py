import allure
import pytest
from playwright.sync_api import expect
from helper import debug

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
valid_inputs = ["Alice", "Bob", "JohnDoe"]
invalid_inputs = ["Invalid@Name", "123#Name", ""]

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è: (scenario, input_value, expected_result, expect_successful_input)
test_cases = []

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ –ø–æ–ª—è
for val in valid_inputs:
    test_cases.append(("visible", val, "PASS", True))

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ –ø–æ–ª—è
for val in invalid_inputs:
    test_cases.append(("visible", val, "FAIL", False))

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã—Ç–æ
for val in valid_inputs + invalid_inputs:
    test_cases.append(("absent", val, "FAIL", False))
    test_cases.append(("hidden", val, "FAIL", False))

@pytest.mark.parametrize("scenario, input_value, expected_result, expect_successful_input", test_cases)
def test_first_name_field(page_open, scenario, input_value, expected_result, expect_successful_input):
    locator = page_open.get_by_role("textbox", name="First Name*")

    try:
        if scenario == "visible":
            with allure.step('–ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—å–æ–º—É'):
                # page.goto("https://magento.softwaretestingboard.com/")
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ —Ç–µ–∫—Å—Ç—É
                # expect(page_open.get_by_text("Create an Account")).to_be_visible(timeout=30000)
                expect(page_open.get_by_role("link", name="Create an Account")).to_be_visible(timeout=40000)
                debug("–ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
                # page_open.get_by_text("Create an Account").click()
                page_open.get_by_role("link", name="Create an Account").click()
                # page_open.get_by_text("Create New Customer Account").click()
                debug("–∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
            with allure.step('–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É'):
                expect(page_open.get_by_role("heading")).to_contain_text("Create New Customer Account", timeout=40000)
                debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
            allure.dynamic.title(f"–¢–µ—Å—Ç: –ø–æ–ª–µ 'First Name*' –≤–∏–¥–Ω–æ, –≤–≤–æ–¥: '{input_value}'")
            with allure.step(f"–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö '{input_value}' –≤ –ø–æ–ª–µ"):
                expect(locator).to_be_visible()
                locator.fill(input_value)
                if expect_successful_input:
                    expect(locator).to_have_value(input_value)
                else:
                    expect(locator).not_to_have_value(input_value)

        elif scenario == "absent":
            allure.dynamic.title(f"–¢–µ—Å—Ç: –ø–æ–ª–µ 'First Name*' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–≤–æ–¥: '{input_value}'")
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—è –≤ DOM"):
                expect(locator).to_have_count(0)
                assert locator.count() == 0, "–ü–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"

        elif scenario == "hidden":
            allure.dynamic.title(f"–¢–µ—Å—Ç: –ø–æ–ª–µ 'First Name*' —Å–∫—Ä—ã—Ç–æ, –≤–≤–æ–¥: '{input_value}'")
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ"):
                expect(locator).to_be_hidden()
                locator.fill(input_value)
                expect(locator).not_to_have_value(input_value)

        actual_result = "PASS"

    except Exception as e:
        actual_result = "FAIL"
        debug(f"–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '{scenario}' —Å –¥–∞–Ω–Ω—ã–º–∏ '{input_value}': {e}", "ERROR")

        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ ({scenario})",
            attachment_type=allure.attachment_type.PNG
        )

        # HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        html_content = page_open.content()
        allure.attach(
            html_content,
            name=f"HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ ({scenario})",
            attachment_type=allure.attachment_type.HTML
        )

        raise

    finally:
        # –õ–æ–≥ –≤ Allure
        allure.attach(str(expected_result), "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        allure.attach(str(actual_result), "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        allure.attach(str(expect_successful_input), "–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—è")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        assert actual_result == expected_result, (
            f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario}' —Å –¥–∞–Ω–Ω—ã–º–∏ '{input_value}': –æ–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç {expected_result}, "
            f"–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ {actual_result}"
        )

# ####################################################################################################################
# –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –Ω–∞—à–µ–º —Ç–µ—Å—Ç–µ:
#
# ---
#
# ### 1Ô∏è‚É£ `expected_result`
#
# * –≠—Ç–æ **–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞** —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è pytest.
# * –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è **–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏** –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤.
# * –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
#
#   * `"PASS"` ‚Üí –º—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ).
#   * `"FAIL"` ‚Üí –º—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ç–µ—Å—Ç —É–ø–∞–¥–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–∫—Ä—ã—Ç–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ).
#
# **–ü—Ä–∏–º–µ—Ä:**
#
# ```python
# test_cases = [
#     ("visible", "Alice", "PASS", True),      # –ø–æ–ª–µ –≤–∏–¥–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ‚Üí —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
#     ("visible", "Invalid@Name", "FAIL", False),  # –ø–æ–ª–µ –≤–∏–¥–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ‚Üí —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å
#     ("absent", "AnyName", "FAIL", False),    # –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å
# ]
# ```
#
# ---
#
# ### 2Ô∏è‚É£ `expect_successful_input`
#
# * –≠—Ç–æ **–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ**, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ **–±—É–¥—É—Ç –≤–≤–µ–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ** –≤ –ø–æ–ª–µ.
# * –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ç–∞–∫–∂–µ –ø—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å `expected_result`.
# * –¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
#
#   * `True` ‚Üí –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –≤ –ø–æ–ª–µ (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å).
#   * `False` ‚Üí –¥–∞–Ω–Ω—ã–µ **–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã** (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å: –ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ).
#
# **–ü—Ä–∏–º–µ—Ä:**
#
# ```python
# ("visible", "Alice", "PASS", True)       # –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
# ("visible", "Invalid@Name", "FAIL", False)  # –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
# ("hidden", "John", "FAIL", False)        # –ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ ‚Üí –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç
# ```
#
# ---
#
# ### 3Ô∏è‚É£ `actual_result`
#
# * –≠—Ç–æ **—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞**.
# * –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ `try/except`:
#
#   * –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à—ë–ª –±–µ–∑ –æ—à–∏–±–æ–∫ ‚Üí `"PASS"`.
#   * –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª, –ø–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ ‚Üí `"FAIL"`.
# * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å `expected_result` –≤ `assert` –≤ –±–ª–æ–∫–µ `finally`.
#
# **–ü—Ä–∏–º–µ—Ä –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è:**
#
# ```python
# try:
#     # –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª–µ–º
#     actual_result = "PASS"  # –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏
# except Exception:
#     actual_result = "FAIL"  # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
# ```
#
# ---
#
# ### üîπ –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
#
# | scenario | input\_value    | expected\_result | expect\_successful\_input | actual\_result |
# | -------- | --------------- | ---------------- | ------------------------- | -------------- |
# | visible  | "Alice"         | PASS             | True                      | PASS           |
# | visible  | "Invalid\@Name" | FAIL             | False                     | FAIL           |
# | absent   | "AnyName"       | FAIL             | False                     | FAIL           |
# | hidden   | "John"          | FAIL             | False                     | FAIL           |
#
# ---
# —Å–¥–µ–ª–∞–π –µ—â—ë —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –≥–¥–µ –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã) –∏ —ç—Ç–æ —Ç–æ–∂–µ –±—É–¥–µ—Ç –≤ Allure.
#
