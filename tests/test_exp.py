import allure
import pytest
from playwright.sync_api import expect

from conftest import page_open
from main_file import report_about, report_bug_and_stop
# from conftest import user_data
from helper import debug
import re
fields = ["First Name*", "Last Name*", "Email*", "Password*", "Confirm Password*"]
names_data_for_fields = {"First Name*": "login", "Last Name*": "login_l", "Email*": "email", "Password*": "password", "Confirm Password*": "password"}
valid_values = []
invalid_values = {}
def valid_val(user_data):
    val_el = []
    for field in fields:
        val_el.append(user_data[0][names_data_for_fields[field]])
    return val_el

def invalid_val(user_data):
    inval_el = {}
    for field in fields:
        ar_inv = []
        for el in user_data[1][names_data_for_fields[field]]:
            value, mode = in_inv(field, el, user_data)
            if mode == "len":
                first, second = value.split(" ", 1)
                # tb.fill(first)
                ar_inv.append(first)
                # debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è {first}", f"{cur_name}")
                # tb.fill(second)
                ar_inv.append(second)
                # debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–æ –¥—Ä—É–≥–µ –∑–Ω–∞—á–µ–Ω–Ω—è {second}", f"{cur_name}")
            else:
                # tb.fill(value)
                # debug(f"–∑–∞–ø–æ–≤–Ω–µ–Ω–æ {value}", f"{cur_name}")
                ar_inv.append(value)
            # ar_inv.append(in_inv(field, el, user_data))
        inval_el[field] =ar_inv
    return inval_el

def in_inv(cur_name: str, el: str, user_data):
    # for el_t in user_data[1][cur_name]:
    #     for el in el_t:
    if el == 'absent':
        # tb.fill('')
        return  "", el
    elif el == 'url':
        # tb.fill(user_data[0]['url'])
        return user_data[0]['url'], el
    elif el[:3] == 'len':
        lminmax = el[4:]
        lmin = int(lminmax.split(" ", 1)[0])
        lmax = int(lminmax.split(" ", 1)[1])
        # tb.fill(user_data[0][cur_name] * 6[:(lmin - 2)])
        # tb.fill(user_data[0][cur_name] * 6[:(lmax + 2)])
        return (user_data[0][names_data_for_fields[cur_name]] * 6)[:(lmin - 2)] +" "+ (user_data[0][names_data_for_fields[cur_name]] * 6)[:(lmax + 2)], el
    elif el == 'no_email':
        # tb.fill(user_data[0]['email'])
        return user_data[0]['url'], el
    elif el == 'no_lower':
        # tb.fill(user_data[0][cur_name].upper())
        return user_data[0][names_data_for_fields[cur_name]].upper(), el
    elif el == 'no_upper':
        # tb.fill(user_data[0][cur_name].lower())
        return user_data[0][names_data_for_fields[cur_name]].lower(), el
    elif el == 'no_digit':
        res = re.sub(r"\d", "", el)
        # tb.fill(res + 'ab')
        return res + 'ab', el
    elif el == 'no_spec':
        res = "".join(ch for ch in el if ch.isalnum() or ch.isspace())
        # tb.fill(res + '1f')
        return res + '1f', el
    elif el == 'probel':
        # tb.fill(user_data[0][cur_name][:2] + ' ' + user_data[0][cur_name][2:])
        return user_data[0][names_data_for_fields[cur_name]][:2] + ' ' + user_data[0][names_data_for_fields[cur_name]][2:], el
    elif el == 'Cyrillic':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = dict(zip(ru, en))
        result1 = []
        for ch in el:
            low = ch.lower()
            if low in mapping:
                new_ch = mapping[low]
                # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
                result1.append(new_ch.upper() if ch.isupper() else new_ch)
            else:
                result1.append(ch)
        # tb.fill("".join(result1))
        return "".join(result1), el
    elif el == 'latin':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = dict(zip(en, ru))
        result2 = []
        for ch in el:
            low = ch.lower()
            if low in mapping:
                new_ch = mapping[low]
                # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
                result2.append(new_ch.upper() if ch.isupper() else new_ch)
            else:
                result2.append(ch)
        return "".join(result2), el
        # tb.fill("".join(result2))
    elif el == 'lowreglat':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = str.maketrans(en + en.lower(), ru + ru.lower())
        converted = el.translate(mapping)
        # tb.fill(converted)
        return converted, el
    elif el == 'upreglat':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = str.maketrans(en + en.upper(), ru + ru.upper())
        converted = el.translate(mapping)
        # tb.fill(converted)
        return converted, el
    elif el == 'lowregcyr':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = str.maketrans(ru + ru.lower(), en + en.lower())
        converted = el.translate(mapping)
        # tb.fill(converted)
        return converted, el
    elif el == 'upregcyr':
        ru = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en = "qwertyuiopdfasdfghjkldfzxcvbnmdf"
        mapping = str.maketrans(ru + ru.upper(), en + en.upper())
        converted = el.translate(mapping)
        # tb.fill(converted)
        return converted, el
    elif el == 'one_reg_log':
        # tb.fill(user_data[0][cur_name].upper())
        return user_data[0][names_data_for_fields[cur_name]].upper(), el
    else:
        # tb.fill(el)
        return el, el


# @allure.title("–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏: –ø–æ–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è")
# @pytest.mark.parametrize("scenario, expected_result", [
#     ("valid", "PASS"),
#     ("no_valid", "FAIL"),
#     #("hidden", "FAIL"),
# ])
# def test_first_name_field(page_open, scenario, expected_result, user_data):
#     valid_values = valid_val(user_data)
#     invalid_values = invalid_val(user_data)


def generate_negative_cases():
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã: –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ"""
    test_cases = []
    for i, field in enumerate(fields):
        for inv in invalid_values[field]:
            case = valid_values.copy()
            case[i] = inv
            test_cases.append((field, dict(zip(fields, case))))
    return test_cases

# üîπ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
# @pytest.mark.dependency(name="positive")
def test_positive_form(page_open, user_data):
    global valid_values, invalid_values
    valid_values = valid_val(user_data)
    invalid_values = invalid_val(user_data)
    allure.dynamic.title("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ")
    print('\n')
    debug("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: —É—Å—ñ –ø–æ–ª—è –≤–∞–ª—ñ–¥–Ω—ñ", "–ü–æ—á–∞—Ç–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É")
    ##########################################################################
    try:
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—å–æ–º—É'):
            link = page_open.get_by_role("link", name="Create an Account")
            expect(link).to_be_visible(timeout=40000)
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
            link.click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")

            # --- –æ–±—Ö—ñ–¥ —Ä–µ–∫–ª–∞–º–∏ ---
            if "google_vignette" in page_open.url or "ad.doubleclick" in page_open.url:
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É google_vignette. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥...", "WARNING")
                page_open.go_back()
                expect(link).to_be_visible(timeout=20000)
                link.click()
                debug("–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∫–ª—ñ–∫ –ø—ñ—Å–ª—è —Ä–µ–∫–ª–∞–º–∏", "INFO")

            close_button = page_open.get_by_role("button", name="Close").first
            if close_button.is_visible():
                close_button.click()
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–æ—é Close. –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ Close", "WARNING")

        with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É'):
            expect(page_open.get_by_text("Create New Customer Account")).to_be_visible(timeout=40000)

            # expect(page_open.get_by_role("heading")).to_contain_text(
            #     "Create New Customer Account", timeout=40000
            # )
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
        ##########################################################################
        with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"):
            for field, value in zip(fields, valid_values):
                tb = page_open.get_by_role("textbox", name=field, exact=True)
                tb.fill(value)
                debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª–µ", f"{field}")
                allure.attach(str(value), name=f"–ü–æ–ª–µ {field}")

        # with allure.step("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏"):
        #     # –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏!)
        #     # expect(page_open.get_by_text("Account created")).to_be_visible()
        #     pass
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—ñ–π'):
            btnS = page_open.get_by_role("button", name="Create an Account")
            expect(btnS).to_be_visible(timeout=10000)
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
            btnS.click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")

        with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É My Account'):
            expect(page_open.locator("h1")).to_contain_text("My Account", timeout=40000)
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–∫–∞—É–Ω—Ç—É")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
            assert page_open.get_by_role("strong").filter(has_text="Account Information").is_visible(), \
                "BUG: –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç"

            account_text = page_open.locator("#maincontent").inner_text(timeout=5000)
            expected_text = f"{user_data[0]['login']} {user_data[0]['login_l']}\n{user_data[0]['email']}"

            assert expected_text in account_text, \
                f"BUG: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–≤–µ–¥–µ–Ω–∏–º –¥–∞–Ω–∏–º"

            # --- debug –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é ---
            debug("—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–≤–µ–¥–µ–Ω–∏–º –¥–∞–Ω–∏–º", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–∫–∞—É–Ω—Ç—É")
            report_about("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ", page_open)
            debug(account_text, "–û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:")
            debug(expected_text, "–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

    except AssertionError as e:
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", "ERROR")
        report_bug_and_stop(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", page_open)
        debug(f"Current URL: {page_open.url}", "INFO")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errors = []
        for selector in [
            "#firstname-error",
            "#lastname-error",
            "#email_address-error",
            "#password-error",
            "#password-confirmation-error",
        ]:
            if page_open.locator(selector).is_visible():
                errors.append(page_open.locator(selector).inner_text())

        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errors.append(alert.inner_text())

        if errors:
            debug("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", "ERROR")
            debug(errors, "Errors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

    except Exception as e:
        debug(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", "ERROR")
        report_bug_and_stop(f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ {e}", page_open)
        debug(f"Current URL: {page_open.url}", "INFO")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
        errors = []
        for selector in [
            "#firstname-error",
            "#lastname-error",
            "#email_address-error",
            "#password-error",
            "#password-confirmation-error",
        ]:
            if page_open.locator(selector).is_visible():
                errors.append(page_open.locator(selector).inner_text())

        alert = page_open.get_by_role("alert").locator("div").first
        if alert.is_visible():
            errors.append(alert.inner_text())

        if errors:
            debug("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", "ERROR")
            debug(errors, "Errors list:")
        # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = page_open.screenshot()
        allure.attach(
            screenshot,
            name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
            attachment_type=allure.attachment_type.PNG
        )

        # debug —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            account_text = page_open.locator("#maincontent").inner_text(timeout=5000)
            debug(account_text, "–¢–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account (—è–∫—â–æ —î):")
        except:
            debug("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account", "INFO")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AssertionError, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —É–ø–∞–ª –∏ pytest –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
        raise e
        # page_open(user_data[0]['url']

############################################################################################################
# def generate_negative_cases():
#     """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã: –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ"""
#     test_cases = []
#     for i, field in enumerate(fields):
#         for inv in invalid_values[field]:
#             case = valid_values.copy()
#             case[i] = inv
#             test_cases.append((field, dict(zip(fields, case))))
#     return test_cases
##########################################################################
# üîπ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ
# @pytest.mark.parametrize("invalid_field, data", generate_negative_cases())
# @pytest.mark.dependency(depends=["positive"])
# def test_negative_form(page_open, invalid_field, data):
def test_negative_form(page_open, user_data):
    global valid_values, invalid_values
    valid_values = valid_val(user_data)
    invalid_values = invalid_val(user_data)

   #  try:
   #      with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—å–æ–º—É'):
   #          link = page_open.get_by_role("link", name="Create an Account")
   #          expect(link).to_be_visible(timeout=40000)
   #          print('\n')
   #          debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
   #          link.click()
   #          debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
   #
   #          # --- –æ–±—Ö—ñ–¥ —Ä–µ–∫–ª–∞–º–∏ ---
   #          if "google_vignette" in page_open.url or "ad.doubleclick" in page_open.url:
   #              debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É google_vignette. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥...", "WARNING")
   #              page_open.go_back()
   #              expect(link).to_be_visible(timeout=20000)
   #              link.click()
   #              debug("–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∫–ª—ñ–∫ –ø—ñ—Å–ª—è —Ä–µ–∫–ª–∞–º–∏", "INFO")
   #
   #          close_button = page_open.get_by_role("button", name="Close").first
   #          if close_button.is_visible():
   #              close_button.click()
   #              debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–æ—é Close. –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ Close", "WARNING")
   #
   #      with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É'):
   #          expect(page_open.get_by_text("Create New Customer Account")).to_be_visible(timeout=40000)
   #          # expect(page_open.get_by_role("heading")).to_contain_text(
   #          #     "Create New Customer Account", timeout=40000
   #          # )
   #          debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
   #      list_inv_fields = generate_negative_cases()
   #      invalid_field = ''
   #      for el_list in list_inv_fields:
   #          invalid_field, data = el_list
   #          inv_value = ''
   #          allure.dynamic.title(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{invalid_field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
   #          print('\n')
   #          debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{invalid_field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏")
   #          with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏"):
   #              debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏", "–§–æ—Ä–º–∞")
   #              for field, value in data.items():
   #                  if invalid_field == field:
   #                      inv_value = value
   #                  tb = page_open.get_by_role("textbox", name=field, exact=True)
   #                  tb.fill(value)
   #                  allure.attach(str(value), name=f"–ü–æ–ª–µ {field}")
   #                  debug("–≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É –ø–æ–ª–µ", f"{field}")
   #          with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—ñ–π'):
   #              btnS = page_open.get_by_role("button", name="Create an Account")
   #              expect(btnS).to_be_visible(timeout=10000)
   #              debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
   #              btnS.click()
   #              debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
   #              # expect(page_open.get_by_role("alert").locator("div").first).to_be_visible(timeout=10000)
   #              expect(page_open.get_by_role("alert")).to_contain_text("Thank you for registering with Main Website Store.")
   #              assert page_open.get_by_role("strong").filter(has_text="Account Information").is_visible(),\
   #                                   "BUG: –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç"
   #              # assert page_open.locator("h1").           page_open.locator("h1").to_contain_text("My Account", timeout=40000), \
   #              #     "BUG: –ù–µ–º–∞—î –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–∫–∞—É–Ω—Ç—É"
   #          with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É My Account'):
   #              expect(page_open.locator("h1")).to_be_visible(timeout=20000)
   #              debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–∫–∞—É–Ω—Ç—É")
   #
   #              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
   #              assert page_open.get_by_role("strong").filter(has_text="Account Information").is_visible(), \
   #                  "BUG: –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç"
   #
   #  except AssertionError as e:
   #      debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—è {invalid_field} –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º \"{inv_value}\"", "TEST FAIL")
   #      raise e
   #      report_bug_and_stop(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—è {invalid_field} –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º \"{inv_value}\"", page_open)
   #      debug(f"Current URL: {page_open.url}", "INFO")
   #  except Exception as e:
   #      # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ñ–æ—Ä–º–∏
   #      errors = []
   #      for selector in [
   #          "#firstname-error",
   #          "#lastname-error",
   #          "#email_address-error",
   #          "#password-error",
   #          "#password-confirmation-error",
   #      ]:
   #          if page_open.locator(selector).is_visible():
   #              errors.append(page_open.locator(selector).inner_text())
   #              debug(page_open.locator(selector).inner_text(), "ERROR")
   #
   #      alert = page_open.get_by_role("alert").locator("div").first
   #      if alert.is_visible():
   #          errors.append(alert.inner_text())
   #          debug(alert.inner_text(), "ERROR")
   #          debug(e, "Errors list:")
   #
   #      if errors:
   #          debug("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", "ERROR")
   #          debug(errors, "Errors list:")
   #          debug(e, "Errors list:")
   #      # –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   #      screenshot = page_open.screenshot()
   #      allure.attach(
   #          screenshot,
   #          name=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏",
   #          attachment_type=allure.attachment_type.PNG
   #      )
   #
   #      # debug —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   #      try:
   #          account_text = page_open.locator("#maincontent").inner_text(timeout=5000)
   #          debug(account_text, "–¢–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account (—è–∫—â–æ —î):")
   #      except:
   #          debug("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ My Account", "INFO")
   #
   #      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AssertionError, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —É–ø–∞–ª –∏ pytest –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É
   #      raise e
   #      # page_open(user_data[0]['url']
   #
    failed_cases = []  # —Ç—É—Ç –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–≤–∞–ª–∏

    try:
        with allure.step('–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É —Ç–∞ –∫–ª—ñ–∫ –Ω–∞ –Ω—å–æ–º—É'):
            link = page_open.get_by_role("link", name="Create an Account")
            expect(link).to_be_visible(timeout=40000)
            print('\n')
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")
            link.click()
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")

            # --- –æ–±—Ö—ñ–¥ —Ä–µ–∫–ª–∞–º–∏ ---
            if "google_vignette" in page_open.url or "ad.doubleclick" in page_open.url:
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É google_vignette. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥...", "WARNING")
                page_open.go_back()
                expect(link).to_be_visible(timeout=20000)
                link.click()
                debug("–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∫–ª—ñ–∫ –ø—ñ—Å–ª—è —Ä–µ–∫–ª–∞–º–∏", "INFO")

            close_button = page_open.get_by_role("button", name="Close").first
            if close_button.is_visible():
                close_button.click()
                debug("–í–∏—è–≤–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–æ—é Close. –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ Close", "WARNING")

        with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É'):
            expect(page_open.get_by_text("Create New Customer Account")).to_be_visible(timeout=40000)
            debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É")

        list_inv_fields = generate_negative_cases()

        for el_list in list_inv_fields:
            invalid_field, data = el_list
            inv_value = ''
            allure.dynamic.title(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{invalid_field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
            print('\n')
            debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –ø–æ–ª–µ '{invalid_field}' –æ—Ç—Ä–∏–º—É—î –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Å—Ç–∏")

            try:
                with allure.step("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏"):
                    debug("–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏", "–§–æ—Ä–º–∞")
                    for field, value in data.items():
                        if invalid_field == field:
                            inv_value = value
                        tb = page_open.get_by_role("textbox", name=field, exact=True)
                        tb.fill(value)
                        str_att = ''
                        if inv_value == value:
                            str_att = "–≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É –ø–æ–ª–µ"
                            debug(str_att, f"{field}")
                        else:
                            str_att = "–≤–≤–µ–¥–µ–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É –ø–æ–ª–µ"
                            debug(str_att, f"{field}")
                        allure.attach(str_att+" "+ "\""+str(value)+"\"", name=f"–ü–æ–ª–µ {field}")


                with allure.step('–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∞—É–Ω—Ç—É'):
                    btnS = page_open.get_by_role("button", name="Create an Account")
                    expect(btnS).to_be_visible(timeout=10000)
                    btnS.click()

                    # —Ç—É—Ç –Ω–∞–≤–º–∏—Å–Ω–æ —Å—Ç–∞–≤–∏–º–æ "–Ω–µ–≤—ñ—Ä–Ω–µ" –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è,
                    # —â–æ–± —Ç–µ—Å—Ç –∑–ª–æ–≤–∏–≤ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–∏–≤—Å—è
                    # expect(page_open.get_by_role("alert")).to_contain_text(
                    #     "Thank you for registering with Main Website Store."
                    # )
                    assert page_open.get_by_role("strong").filter(has_text="Account Information").is_visible(), \
                        "BUG: –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç"

                # with allure.step('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É My Account'):
                #     expect(page_open.locator("h1")).to_be_visible(timeout=20000)
                #     debug("–∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –µ–∫–∞—É–Ω—Ç—É", "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –µ–∫–∞—É–Ω—Ç—É")
                #     assert page_open.get_by_role("strong").filter(has_text="Account Information").is_visible(), \
                #         "BUG: –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ–∫–∞—É–Ω—Ç"

            except AssertionError as e:
                debug(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—è {invalid_field} –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º \"{inv_value}\"", "TEST FAIL")
                failed_cases.append((invalid_field, inv_value, str(e)))

                alert = page_open.get_by_role("alert").locator("div").first
                if alert.is_visible():
                    errors.append(alert.inner_text())
                    debug(alert.inner_text(), "ERROR")


            except Exception as e:
                # –ª–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–ø–æ–ª—è, –∞–ª–µ—Ä—Ç–∏ —Ç–æ—â–æ)
                errors = []
                for selector in [
                    "#firstname-error",
                    "#lastname-error",
                    "#email_address-error",
                    "#password-error",
                    "#password-confirmation-error",
                ]:
                    if page_open.locator(selector).is_visible():
                        errors.append(page_open.locator(selector).inner_text())
                        debug(page_open.locator(selector).inner_text(), "ERROR")

                alert = page_open.get_by_role("alert").locator("div").first
                if alert.is_visible():
                    errors.append(alert.inner_text())
                    debug(alert.inner_text(), "ERROR")

                if errors:
                    failed_cases.append((invalid_field, inv_value, "; ".join(errors)))

                screenshot = page_open.screenshot()
                allure.attach(screenshot, name="–°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∏", attachment_type=allure.attachment_type.PNG)

    finally:
        # –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π: —è–∫—â–æ –±—É–ª–∏ —Ñ–µ–π–ª–∏ ‚Äî –∑–∞–≤–∞–ª—é—î–º–æ —Ç–µ—Å—Ç 1 —Ä–∞–∑
        if failed_cases:
            msg = "\n".join([f"{fld}='{val}' ‚Üí {err}" for fld, val, err in failed_cases])
            raise AssertionError(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –∑–Ω–∞–π—à–æ–≤ –ø–æ–º–∏–ª–∫–∏:\n{msg}")